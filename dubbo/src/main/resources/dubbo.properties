#研发环境注册中心地址
dubbo.registry.address=192.168.2.58:2181
#注册中心地址协议
dubbo.registry.protocol=zookeeper
#服务注册类型  false：静态类型(监控中心管理上下线) true:自动管理
dubbo.registry.dynamic=true
#服务版本
dubbo.service.version=1.0.0
#服务协议 dubbo、rmi、hessian、http、webservice、thrift、memcached、redis
#缺省配置为dubbo协议，该采用单一长连接和NIO异步通讯，适合于小数据量大并发的服务调用，以及服务消费者机器数远大于服务提供者机器数的情况。
dubbo.protocol.protocol=dubbo
#序列互方式 json/hessian2
dubbo.protocol.serialization=hessian2
#服务数据通信端口
dubbo.protocol.port=20880
#jetty端口
hessian.protocol.port=18088
#all 所有消息都派发到线程池，包括请求，响应，连接事件，断开事件，心跳等。
#direct 所有消息都不派发到线程池，全部在IO线程上直接执行。
#message 只有请求响应消息派发到线程池，其它连接断开事件，心跳等消息，直接在IO线程上执行。
#execution 只请求消息派发到线程池，不含响应，响应和其它连接断开事件，心跳等消息，直接在IO线程上执行。
#connection 在IO线程上，将连接断开事件放入队列，有序逐个执行，其它消息派发到线程池。
dubbo.protocol.dispatcher=all
#fixed 固定大小线程池，启动时建立线程，不关闭，一直持有。(缺省)
#cached 缓存线程池，空闲一分钟自动删除，需要时重建。
#limited 可伸缩线程池，但池中的线程数只会增长不会收缩。(为避免收缩时突然来了大流量引起的性能问题)。
dubbo.protocol.threadpool=limited
#dubbo服务线程池数量
dubbo.protocol.threads=250
#provider服务超时(建立provider端设置，consumer端不建议设置)
dubbo.timeout=20000
#消费端超时设置
dubbo.consumer.timeout=20000
#consumer启动时不检查provider
dubbo.check=false
#provider是否验证参数
dubbo.validation=false
#是否开启监控
dubbo.monitor=false
#provider并发数（修改为和dubbo.protocol.threads一致）
dubbo.executes=250
#集群模式 failover:失败自动切换(默认)、ailfast:一次调用失败、failsafe:失败安全、failback:失败恢复定时重发、broadcast:广播调用一台失败即失败
dubbo.cluster=failover
#失败重试次数
dubbo.retries=1
#负载平衡  random:随机、roundrobin：轮循、leastactive：最少活跃调用数、consistenthash：一致hash值
dubbo.loadbalance=random